<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace：命名空间，用于隔离sql语句
    #{ }：点位符，相当于jdbc的?
    ${ }：是字符串拼接指令，如果入参为普通数据类型{ }内部只写value
    -->
<mapper namespace="com.zhihang.mapper.UserMapper">
    <sql id="user_sql">
    `id`,
	`username`,
	`birthday`,
	`sex`,
	`address`
    </sql>
    <!-- id:sql id,语句的唯一标识
        parameterType：入参的数据类型
        resultType：返回结果的数据类型
    -->
    <select id="getUserById" parameterType="int"
            resultType="uSEr">
        SELECT
        <include refid="user_sql"/>
        FROM
        `user`
        WHERE
        id =#{id};
    </select>
    <select id="getUserByIds" parameterType="QueryVo" resultType="user">
        SELECT
        <include refid="user_sql"/>
        FROM
        `user`
        <where>
            <!-- foreach循环标签
            collection：要遍历的集合
            open:循环开始之前要输出的内容
            item：设置循环变量
            separator：分隔符
            close：循环结束之后输出的内容
            -->
            <foreach collection="ids" open="id IN(" item="uId" separator="," close=")">
                #{uId}
            </foreach>
        </where>
    </select>
    <select id="getUserByUserName" parameterType="string"
            resultType="com.zhihang.pojo.User">
	SELECT
	id,
	username,
	birthday,
	sex,
	address
FROM
	USER
WHERE
	username LIKE '%${value}%';
	</select>
    <select id="getUserByQueryVo" parameterType="QueryVo"
            resultType="com.zhihang.pojo.User">
        SELECT
        id,
        username,
        birthday,
        sex,
        address
        FROM
        USER
        WHERE
        username LIKE '%${user.username}%';
    </select>
    <insert id="insertUser" parameterType="com.zhihang.pojo.User" useGeneratedKeys="true" keyProperty="id">
        <!--<selectKey keyProperty="id" resultType="int" order="AFTER">-->
        <!--SELECT LAST_INSERT_ID()-->
        <!--</selectKey>-->
        INSERT INTO USER (
        username,
        birthday,
        sex,
        address
        )
        VALUES
        (
        #{username},
        #{birthday},
        #{sex},
        #{address}
        );
    </insert>
    <select id="getUserCount" resultType="int">
        SELECT COUNT(1) FROM `user`;
    </select>

    <select id="getUserByPojo" parameterType="user"
            resultType="com.zhihang.pojo.User">
        SELECT
        id,
        username,
        birthday,
        sex,
        address
        FROM
        USER
        <!-- <where>自动补上where关键字，同时处理多余and-->
        <where>
            <if test="username !=null and username != ''">
                and username LIKE '%${username}%'
            </if>
            <if test="sex != null and sex != ''">
                and sex = #{sex}
            </if>
        </where>
    </select>
    <resultMap type="user" id="user_order_map">
        <id property="id" column="id"/>
        <result property="username" column="username"/>
        <result property="birthday" column="birthday"/>
        <result property="sex" column="sex"/>
        <result property="address" column="address"/>
        <result property="uuid2" column="uuid2"/>
        <!-- association用于配置一对一关系
             property：order里面的User属性
             javaTupe：user的数据类型，支持别名
         -->
        <collection property="orders" ofType="com.zhihang.pojo.Order">
            <id property="id" column="oid"/>
            <!--<result property="userId" column="id"/>-->
            <result property="number" column="number"/>
            <result property="createtime" column="createtime"/>
            <result property="note" column="note"/>
        </collection>
    </resultMap>
    <select id="getUserOrderMap" resultMap="user_order_map">
      SELECT
	u.id,
	u.username,
	u.birthday,
	u.sex,
	u.address,
	u.uuid2,
	o.id oid,
	o.number,
	o.createtime,
	o.note
FROM
	`user` u
LEFT JOIN `order` o ON o.user_id = u.id;
    </select>
</mapper>